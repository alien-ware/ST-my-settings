%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: reStructuredText Improved
comment: syntax highlighting for reStructuredText http://docutils.sourceforge.net, based on rst mode from jEdit
file_extensions:
  - rst
  - rest
scope: text.restructuredtext
contexts:
  main:
    - include: block
  comment:
    - match: '^([\x{00000020}\t]*)(\.\.)\s+'
      push:
        - meta_scope: comment.block.dot.double
        - match: '^(?!\1[\x{00000020}\t])'
          pop: true
  anonymous-ref:
    - match: '^([\x{00000020}\t]*)(__)\s'
      captures:
        2: keyword.operator.restructuredtext.ref.start
      push:
        - meta_content_scope: string.other.restructuredtext.ref
        - match: '^(?!\1[\x{00000020}\t]+\S)'
          pop: true
  block:
    - include: directive
    - include: parameter
    - include: table
    - include: option-list
    - include: line-block
    - include: blockquote
    - include: doctest-block
    - include: refdef
    - include: substdef
    - include: anonymous-ref
    - include: footnote
    - include: list-unnumbered
    - include: list-numbered
    - include: headline-or-term
    - include: headline-with-overline
    - include: comment
    - include: paragraph
    - include: preformatted
    # - include: scope:whitespace-line
  blockquote:
    - match: '^[\x{00000020}\t]+(--)\s+(.*)'
      scope: meta.block.blockquote.author.restructuredtext
      captures:
        1: keyword.operator.blockquote-author.restructuredtext
        2: string.other.blockquote-author.restructuredtext
  continuation:
    - match: \\$
      scope: punctuation.separator.continuation.restructuredtext
  directive:
    - match: '^([\x{00000020}\t]*)(\.\.)\s+([\w\-]+(?::[\w\-]+)*)(::)\s+'
      captures:
        2: keyword.operator.restructuredtext.directive
        3: keyword.restructuredtext.directive
        4: keyword.operator.restructuredtext.directive
      push:
        - meta_content_scope: string.other.restructuredtext.directive.parameter
        - match: '^(?:(?!\1[\x{00000020}\t])|(?=\1[\x{00000020}\t]+:|\s*$))'
          pop: true
  doctest-block:
    - match: '^([\x{00000020}\t]*)(>>>)\x{00000020}(.*)'
      captures:
        2: keyword.operator.doctest.ps1.restructuredtext
        3: variable.other.doctest.ps1.restructuredtext
      push:
        - meta_scope: meta.block.doctest.block.restructuredtext
        - match: ^(?!\1(>>>|\.\.\.|\S))
          pop: true
        - match: '^[\x{00000020}\t]*(>>>)\x{00000020}(.*)'
          scope: meta.line.doctest.ps1.restructuredtext
          captures:
            1: keyword.operator.doctest.ps1.restructuredtext
            2: variable.other.doctest.ps1.restructuredtext
        - match: '^[\x{00000020}\t]*(\.\.\.)\x{00000020}(.*)'
          scope: meta.line.doctest.ps1.restructuredtext
          captures:
            1: keyword.operator.doctest.ps2.restructuredtext
            2: variable.other.doctest.ps2.restructuredtext
        - match: '^[\x{00000020}\t]*(\S.*)'
          scope: meta.line.doctest.expected.restructuredtext
          captures:
            1: string.other.doctest.expected.restructuredtext
  footnote:
    - match: '^([\x{00000020}\t]*)(\.\.\s\[)(\#[\w\-]*|\*|[\w\-]+)(\])'
      captures:
        2: keyword.operator.restructuredtext.ref.start
        3: storage.class.restructuredtext.ref
        4: keyword.operator.restructuredtext.ref.end
      push:
        - meta_content_scope: string.other.restructuredtext.ref
        - match: '^(?!\1[\x{00000020}\t]+\S)'
          pop: true
  headline-or-term:
    - match: '(?x) ^ (?= (\S+\x{00000020})* \S+ $) (?= (?!\d[\.\)]) \w .{2,55} (?<!\.|::|\\|\x{00000020}) $)'
      push:
        - meta_content_scope: markup.heading.headline.or-term.restructuredtext
        - match: '(?x) ^ (?=[\x{00000020}\t]+\S) | ^ ( ([=\-`:.''"~^_*+\#])\2{2,55} | \s* | (?=\|\s*$) )$'
          captures:
            1: keyword.operator.heading.restructuredtext
          pop: true
        - include: inline
  headline-with-overline:
    - match: '^((?!::$)([=\-`:.''"~^_*+\#])\2+)$'
      captures:
        1: keyword.operator.heading.restructuredtext
      push:
        - meta_content_scope: markup.heading.headline.restructuredtext
        - match: ^((\1)|\s*)$
          captures:
            2: keyword.operator.heading.restructuredtext
          pop: true
        - include: inline
  inline:
    - include: string-specials
    - match: '\|[^|\s]+\|'
      scope: variable.other.substitution.restructuredtext
    - match: '(`)([^`<]+)(`)(__?)\b'
      scope: meta.restructuredtext.link-explicit
      captures:
        1: keyword.operator.restructuredtext.group
        2: string.other.ref.restructuredtext
        3: keyword.operator.restructuredtext.group
        4: keyword.operator.restructuredtext.link-explicit
    - match: '(`)(?=[^`<]+<[^>]+>`__?\b)'
      captures:
        1: keyword.operator.restructuredtext.group
      push:
        - meta_scope: meta.restructuredtext.link-explicit
        - meta_content_scope: string.other.ref.restructuredtext
        - match: '(<)([^>]+)(>)(`)(__?)\b'
          captures:
            1: keyword.operator.restructuredtext.link
            2: markup.underline.link.restructuredtext
            3: keyword.operator.restructuredtext.link
            4: keyword.operator.restructuredtext.link-explicit
            5: keyword.operator.restructuredtext.link-explicit
          pop: true
        - include: string-specials
    - match: '([\w\-]+)(__?)\b'
      scope: meta.restructuredtext.link-explicit
      captures:
        1: string.other.restructuredtext.ref
        2: keyword.operator.restructuredtext.link-explicit
    - match: '(\[)(\#[\w\-]*|\*|[\w\-]+)(\])(_)'
      scope: meta.restructuredtext.link-footnote
      captures:
        1: keyword.operator.group.restructuredtext
        2: string.other.ref.restructuredtext
        3: keyword.operator.group.restructuredtext
        4: keyword.operator.link.restructuredtext
    - match: (_`)
      captures:
        1: keyword.operator.ref.restructuredtext
      push:
        - meta_scope: storage.class.ref.restructuredtext
        - match: (`)|^\s*$
          captures:
            1: keyword.operator.ref.restructuredtext
          pop: true
    - match: '((?:^|(?<=\s|["''\(\<\[\{\-\/\:=\+\*]))([a-zA-Z][a-zA-Z0-9.+\-]*:(?://?)?[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}]*(?:[_~*/=+a-zA-Z0-9]|[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}](?=[>]))(?:\?[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}]*(?:[_~*/=+a-zA-Z0-9]|[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}](?=[>])))?(?:#[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}]*(?:[_~*/=+a-zA-Z0-9]|[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}](?=[>])))?|[\-_!~*''{|}/#?^`&=+$%a-zA-Z0-9\x{00000000}]+(?:\.[\-_!~*''{|}/#?^`&=+$%a-zA-Z0-9\x{00000000}]+)*(?<!\x{00000000})@[\-_!~*''{|}/#?^`&=+$%a-zA-Z0-9\x{00000000}]+(?:\.[\-_!~*''{|}/#?^`&=+$%a-zA-Z0-9\x{00000000}]*)*(?<!\x{00000000})(?:[_~*/=+a-zA-Z0-9]|[\-_.!~*''()\[\];/:@&=+$,%a-zA-Z0-9\x{00000000}](?=[>])))(?:$|(?=\s|[\x{00000000}\.\,\;\!\?\-\/\:=\+\*"''\)\>\]\}])))'
      scope: string.other.link.implicit.restructuredtext
      captures:
        1: markup.underline.link.restructuredtext.implicit
    - match: (?<!`)(``)(.)
      captures:
        1: keyword.operator.code.restructuredtext
        2: variable.parameter.restructuredtext.preformatted
      push:
        - meta_content_scope: variable.parameter.restructuredtext.preformatted
        - match: (``)(?!`)|^\s*$
          captures:
            1: keyword.operator.code.restructuredtext
          pop: true
    - match: "(:)(doc|ref)(:`)(?=[^`<]+<[^>]+>`)"
      captures:
        1: keyword.operator.restructuredtext.role
        2: keyword.restructuredtext.role
        3: keyword.operator.restructuredtext.role
      push:
        - meta_scope: meta.restructuredtext.link-explicit
        - meta_content_scope: string.other.ref.restructuredtext
        - match: "(<)([^>]+)(>)(`)"
          captures:
            1: keyword.operator.restructuredtext.link
            2: markup.underline.link.restructuredtext
            3: keyword.operator.restructuredtext.link
            4: keyword.operator.restructuredtext.role
          pop: true
        - include: string-specials
    - match: "(:)(doc|ref)(:`)([^`<]*)(`)"
      scope: meta.restructuredtext.link-explicit
      captures:
        1: keyword.operator.restructuredtext.role
        2: keyword.restructuredtext.role
        3: keyword.operator.restructuredtext.role
        4: markup.underline.link.restructuredtext
        5: keyword.operator.restructuredtext.role
    - match: '(:)([\w\-]+)(?:(:)([\w\-]+))?(:`)([^`]*)(`)'
      scope: meta.restructuredtext.role
      captures:
        1: keyword.operator.restructuredtext.role
        2: keyword.restructuredtext.role
        3: keyword.operator.restructuredtext.role
        4: keyword.restructuredtext.role
        5: keyword.operator.restructuredtext.role
        6: string.quoted.other.restructuredtext.role
        7: keyword.operator.restructuredtext.role
    - match: (\*\*)
      captures:
        1: keyword.operator.bold.restructuredtext
      push:
        - meta_scope: markup.bold.restructuredtext
        - match: (\*\*)|^\s*$
          captures:
            1: keyword.operator.bold.restructuredtext
          pop: true
    - match: "([*`])"
      captures:
        1: keyword.operator.emph.restructuredtext
      push:
        - meta_scope: markup.italic.restructuredtext
        - match: (\1)|^\s*$
          captures:
            1: keyword.operator.emph.restructuredtext
          pop: true
  line-block:
    - match: '^(?=([\x{00000020}\t]*)\|[\x{00000020}\t])'
      push:
        - meta_scope: markup.list.restructuredtext.line-block
        - match: '^(?!\1(\|[\x{00000020}\t]|\|$|[\x{00000020}\t]))'
          pop: true
        - include: line-block-content
  line-block-content:
    - match: '^([\x{00000020}\t]*)(\|)'
      captures:
        2: keyword.operator.restructuredtext.line-block
      push:
        - meta_scope: meta.block.restructuredtext.line-block-line
        - match: ^((?=\1\|)|(?!\1\s))
          pop: true
        - include: inline
  list-numbered:
    - match: '(?x) [\x{00000020}\t]* (\()((?i)iii|ii|iv|ix|i|viii|vii|vi|v|x|\w)(\)) \s'
      captures:
        1: keyword.operator.unnumbered-list.restructuredtext
        2: constant.character.numeration.restructuredtext
        3: keyword.operator.unnumbered-list.restructuredtext
      push:
        - meta_scope: meta.list.numbered.restructuredtext
        - match: $
          pop: true
        - include: inline
    - match: '(?x) [\x{00000020}\t]* ((?i)iii|ii|iv|ix|i|viii|vii|vi|v|x|\w)([\.\)]) \s'
      captures:
        1: constant.character.numeration.restructuredtext
        2: keyword.operator.unnumbered-list.restructuredtext
      push:
        - meta_scope: meta.list.numbered.restructuredtext
        - match: $
          pop: true
        - include: inline
  list-unnumbered:
    - match: '(?x) [\x{00000020}\t]* ([\*\+\-•‣\⁃]) \s'
      captures:
        1: keyword.operator.unnumbered-list.restructuredtext
      push:
        - meta_scope: meta.list.unnumbered.restructuredtext
        - match: $
          pop: true
        - include: inline
  option-list:
    - match: '^([\x{00000020}\t]*)((?:--?|/)\w(?:(?!\x{00000020}\x{00000020}).)*)(?=\x{00000020}\x{00000020}+\S|$)'
      captures:
        2: entity.name.option.restructuredtext
      push:
        - meta_scope: meta.documentation.option-list.restructuredtext
        - match: '^((?!\1[\x{00000020}\t]+)|$)'
          pop: true
        - include: inline
  paragraph:
    - match: (?x) ^ (?=\S.*\w)
      push:
        - meta_scope: meta.paragraph.restructuredtext
        - match: '(?x) ^ (?!\S) | ^ (?=[\W\s]*$) | (?=::$)'
          pop: true
        - include: inline
    - match: '(?x) ^ (?=([\x{00000020}\t]+)\S)'
      push:
        - meta_scope: meta.paragraph.restructuredtext
        - include: inline
        - match: (?x) (?=::$) | $
          pop: true
  parameter:
    - match: '^([\x{00000020}\t]*)(:)([^:]+)(:)\s+'
      captures:
        2: keyword.operator.restructuredtext.parameter
        3: variable.parameter.restructuredtext
        4: keyword.operator.restructuredtext.parameter
      push:
        - meta_scope: meta.variable.parameter
        - match: '^(?!(\1[\x{00000020}\t]+|$))'
          pop: true
  preformatted:
    - match: (::)$
      captures:
        1: keyword.operator.reStructuredText
      push:
        - meta_scope: meta.preformatted.restructuredtext
        - include: preformatted-content
        - match: ^(?=.)
          pop: true
  preformatted-block:
    - match: '^(?=([\x{00000020}\t]+))'
      push:
        - meta_scope: meta.preformatted.block.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: preformatted-content
  preformatted-content:
    - match: '^([\x{00000020}\t]+)(?=(?:class|def) \w+(?:\(.*\))?:$)'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.python.restructuredtext
        - match: ^(?!\1|$)
          pop: true
        - include: scope:source.python
    - match: '^([\x{00000020}\t]+)(?=(?:class|def) \w+(?:\(.*\))?$)'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.ruby.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: scope:source.ruby
    - match: '^([\x{00000020}\t]+)(?=\<[\w\-]+(?:\s+[\w\-]+="[^"]*")*\>)'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.html.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: scope:text.html.basic
    - match: '^([\x{00000020}\t]+)(?=function\s+[\$\w]+\(.*\))'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.javascript.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: scope:source.js
    - match: '^([\x{00000020}\t]+)(?=\$\()'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.javascript.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: scope:source.js
    - match: '^([\x{00000020}\t]+)(?=\$[\x{00000020}\t])'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.shell.restructuredtext
        - match: ^(?!\1)
          pop: true
        - include: shell
    - match: '^(?=([\x{00000020}\t]*)>)'
      push:
        - meta_scope: string.unquoted.heredoc.preformatted.preformatted
        - match: ^(?!\1>)
          pop: true
        - match: '^[\x{00000020}\t]*((?:>\x{00000020}?)+)'
          scope: meta.preformatted.quoted.line.restructuredtext
          captures:
            1: keyword.operator.preformatted-line.restructuredtext
  refdef:
    - match: '^([\x{00000020}\t]*)(\.\.\s+_)([^:]*)(:)\s+'
      captures:
        2: keyword.operator.restructuredtext.ref.start
        3: storage.class.restructuredtext.ref
        4: keyword.operator.restructuredtext.ref.end
      push:
        - meta_content_scope: string.other.restructuredtext.ref
        - match: '^(?!\1[\x{00000020}\t]+\S)'
          pop: true
  shell:
    - match: (\$)\s
      scope: keyword.operator.shell.restructuredtext
    - match: |-
        (?x) (?<=[\s\(])\b(?: for | in | do | done | while | if | then |
        | fi | elif | read | echo | case | esac | exit | die | printf
        )\b
      scope: support.function.builtin.shell.restructuredtext
    - match: '(?x) (?: \;\; | \; | \[\[ | \]\] | \&\& | \|\| | \! | > | < | & | \| )'
      scope: keyword.operator.shell.restructuredtext
    - match: |-
        (?x) (?<=[\s\(])\b(?: cp | mv | rm | cat | ls | \[ | \] | find | grep | awk | perl | mkdir
        | rmdir | cd | cwd | pwd | svn | git | hg | scp | make | ps
        | sed | python | ruby
        )\b
      scope: support.function.shell.restructuredtext
    - match: '(?x) (?<=\s)(?: \-[\w\-]+ )'
      scope: entity.other.attribute-name.shell.restructuredtext
    - match: \\\n
      scope: punctuation.separator.continuation.shell.restructuredtext
    - include: shell-variable
    - include: shell-quoted-string
  shell-quoted-string:
    - match: (?x)"
      push:
        - meta_scope: string.quoted.double.shell.restructuredtext
        - match: (?x)"
          pop: true
        - match: \\.
          scope: constant.character.entity
        - include: shell-variable
    - match: "'"
      push:
        - meta_scope: string.quoted.single.shell.restructuredtext
        - match: "'"
          pop: true
        - match: \\.
          scope: constant.character.entity
  shell-variable:
    - match: '(\$\{)'
      captures:
        1: punctuation.definition.variable.begin.restructuredtext
      push:
        - meta_scope: string.interpolated.variable.sublime-zconf
        - match: '(\})'
          captures:
            1: punctuation.definition.variable.end.restructuredtext
          pop: true
  string-specials:
    - match: \\.
      scope: constant.character.escape.restructuredtext
    - match: "--"
      scope: constant.constant.character.entity.restructuredtext
  substdef:
    - match: '^([\x{00000020}\t]*)(\.\.)\s(\|[\w\-]+\|)\s([^:]+)(::)'
      captures:
        2: keyword.operator.restructuredtext.directive
        3: variable.other.substitution.restructuredtext
        4: keyword.restructuredtext.directive
        5: keyword.operator.restructuredtext.directive
      push:
        - meta_content_scope: string.other.restructuredtext.subst
        - match: '^(?!\1[\x{00000020}\t]+\S)'
          pop: true
  table:
    - match: '^(?=([\x{00000020}\t]*)(\+\-+)+\+\s*)'
      push:
        - meta_scope: meta.block.table.restructuredtext
        - match: ^(?!\1(\+|\|))
          pop: true
        - include: table-content
    - match: '^[\x{00000020}\t]*(==+\x{00000020}+)+==+$'
      scope: keyword.operator.table.row.restructuredtext
    - match: '^[\x{00000020}\t]*(--+\x{00000020}+)+--+$'
      scope: keyword.operator.table.row.restructuredtext
  table-content:
    - match: '^[\x{00000020}\t]*(\+\-+)+\+'
      scope: keyword.operator.table.row.restructuredtext
    - match: '^[\x{00000020}\t]*(\+=+)+\+'
      scope: keyword.operator.table.row.restructuredtext
    - match: '(\|(?=[\x{00000020}\t]))'
      captures:
        1: keyword.operator.table.data.restructuredtext
      push:
        - meta_scope: meta.block.table.data.restructuredtext
        - match: (?<=\s)(?=\|)
          pop: true
        - include: inline
    - match: \|$
      scope: keyword.operator.table.data.restructuredtext
