{
    // This is where you initially define a new tag mode.
    // This new tag_mode key must be used in all other settings in this file
    // to set up its specific settings.
    // Determine which style of tag-matching to use in which syntax.
    "tag_mode": [
        {"mode": "xml", "syntax": ["XML"]},
        {
            "mode": "xhtml",
            "syntax": [
                "HTML",
                "HTML 5",
                "PHP",
                "Jinja",
                "HTML (Jinja Templates)",
                "HTML (Jinja2)",
                "HTML (Rails)",
                "HTML (Twig)",
                "HTML (Django)",
                "laravel-blade",
                "blade",
                "Handlebars",
                "AngularJS",
                "Java Server Pages (JSP)",
            ],
            "first_line": "^[ \\t]*<\\?xml",
        },
        {
            "mode": "html",
            "syntax": [
                "HTML",
                "HTML 5",
                "PHP",
                "Jinja",
                "HTML (Jinja Templates)",
                "HTML (Jinja2)",
                "HTML (Rails)",
                "HTML (Twig)",
                "HTML (Django)",
                "laravel-blade",
                "blade",
                "Handlebars",
                "AngularJS",
                "Java Server Pages (JSP)",
            ],
        },
        {
            "mode": "cfml",
            "syntax": ["HTML+CFML", "ColdFusion", "ColdFusionCFC"],
        },
        // new
        {"mode": "bbcode", "syntax": ["BBCode"]},
    ],
    // Style to use for matched tags
    "tag_style": {
        "xml": "tag",
        "xhtml": "tag",
        "html": "tag",
        "cfml": "tag",
        // new
        "bbcode": "tag",
    },
    // Scopes to exclude from tag searches.
    "tag_scope_exclude": {
        "xhtml": ["string", "comment"],
        "html": ["string", "comment"],
        "cfml": ["string", "comment"],
    },
    // Optional closing HTML tags. You can use 'null' if it does not require a pattern.
    "optional_tag_patterns": {
        "xml": null,
        "xhtml": null,
        "html": "colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr",
        "cfml": "cf.+|colgroup|dd|dt|li|options|p|td|tfoot|th|thead|tr",
        // new
        "bbcode": null,
    },
    // Tags that never have a closing.  You can use 'null' if it does not require a pattern.
    "void_tag_patterns": {
        "xml": null,
        "xhtml": null,
        "html": "area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr",
        "cfml": "area|base|basefont|br|col|embed|frame|hr|img|input|isindex|keygen|link|meta|param|source|track|wbr",
        // new
        "bbcode": "\\*",
    },
    // Self closing tags.  Single tags that are closed like this <tag />
    "self_closing_tag_patterns": {
        "xml": "[\\w:\\.\\-]+",
        "xhtml": "[\\w:\\.\\-]+",
        "html": "circle|ellipse|line|path|polygon|polyline|rect|stop|use",
        "cfml": "cf.+",
        // new
        "bbcode": null,
    },
    // Regex for tag name. Do not use capturing groups.
    "tag_name":
    {
        "xml": "[\\w:\\.\\-]+",
        "xhtml": "[\\w:\\.\\-]+",
        "html": "[\\w:\\.\\-]+",
        "cfml": "[\\w:\\.\\-]+",
        // new
        "bbcode": "[a-zA-Z0-9_\\-]+",
    },
    // HTML attributes.  Do not use capturing groups.
    "attributes":
    {
        // fix Vue.js "@" attributes
        "xml": "[\\w:@][-\\w\\d:.]*(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'))?",
        "xhtml": "[\\w:@][-\\w\\d:.]*(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'))?",
        "html": "[\\w:@][-\\w\\d:.]*(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s\"'`=<>]+))?",
        "cfml": "[\\w:@][-\\w\\d:.]*(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s\"'`=<>]+))?",
        // new
        "bbcode": "[^\\[\\]]+",
    },
    // Regex for start/opening tag.  Use a capturing group for tag name and self closing indicator '/' only.
    // Attributes and tag names are inserted using python string formatting:
    // the keyword 'attributes' and `tag_name` are used.
    "start_tag": {
        "xml": "<(%(tag_name)s)(?:\\s+%(attributes)s)*\\s*(/?)>",
        "xhtml": "<(%(tag_name)s)(?:\\s+%(attributes)s)*\\s*(/?)>",
        "html": "<(%(tag_name)s)(?:\\s+%(attributes)s)*\\s*(/?)>",
        "cfml": "<(%(tag_name)s)(?:(?:\\s+%(attributes)s)*|(?:(?<=cfif)|(?<=cfelseif))[^>]+)\\s*(/?)>",
        // new
        "bbcode": "\\[(%(tag_name)s)(?:%(attributes)s)*(/?)\\]",
    },
    // Regex for end/closing tag.  Only use a capturing group for name.
    "end_tag": {
        "xml": "</([\\w\\:\\.\\-]+)[^>]*>",
        "xhtml": "</([\\w\\:\\.\\-]+)[^>]*>",
        "html": "</([\\w\\:\\.\\-]+)[^>]*>",
        "cfml": "</([\\w\\:\\.\\-]+)[^>]*>",
        // new
        "bbcode": "\\[/([^\\]]+)\\]",
    },
}
